``````` This is my notes file for '30 Days to Learn Laravel by Jeffrey Way  ```````

* Lecture 01 *

    -> Setting Up Herd and starting a new laravel project. Problems I faced :
        -> Uncommenting Zip command in php.ini, installing an unzipping utility and adding its path to system variables, and running a local server on my system using 'php artisan serve' command because 'laravel-project.test' wasn't working in my browser.
        -> I was Facing 'Failed to listen at 127.0.0.1:<port_number>'. I resolved it by going into C:\Users\<user>\.config\herd\php84\php.ini\ . Change `variables_order = "EGPCS"` to `variables_order = "GPCS"`.

* Lecture 02 : Your First Route and View *

    -> Adding two route paths (i.e. /about & /contact) in the /routes/web.php and building corresponding rendering pages (view) in /resources/views/...

* Lecture 03 : Create a Layout File *

    -> update about.php, contact.php to 'about.blade.php' and 'contact.blade.php' . Think of Blade as an extra layer on top of php which gives you some goodies, some helper methods and some shortcuts. (like tailwind CSS on top of CSS)

    -> Make /views/Components/layout.blade.php and past the layout HTML (which is common to all pages) in that so we don't have to write same darn HTML in each web-page.

    -> We don't want to paste our basic html layout code in every page's file (home,about, contact). So we paste it in a layout file and the reference it as a custom html tag. Since our file name is layout, so to reference it we use:

        <x-layout>
            <h1> Content which is unique to every page </h1>
        </x-layout>

        use of word x is just to make the tag unique and making sure we aren't using already existing tag.

    -> In layout file, we must tell the file that we want to past some unique content in the corresponding page. So, we mark the space in the layout file using this code:

        <?php echo $slot ?>
        -> 'Slot' is a reserved keyword in Laravel.

        -> Since we are using Blade, so '{{ $slot }}' will be equivalent to <?php echo $slot ?>

	** HOME WORK **

    -> extracting nav link in a file :
        - extract nav link in a file /views/Components/nav-link.blade.php
        - use {{ $attributes }} in place of 'href=""', since we are going to make it dynamic and link will be unique for each page.

        ```laravel

	    ./project/resources/views/Components/nav-link.blade.php~
        <a {{ $attributes }}> {{ $slot }} </a>

	    ./project/resources/views/Components/layout.blade.php~
        and <x-nav-link href="/page-route"> Page Name </x-nav-link> in the layout file.

        ```
* Lecture 04 : Pretty Layout TailwindCSS *

    -> {{ $attributes }} can be 'href', 'id', 'class' etc.
    -> What to do if you have more than one slots to be filled dynamically.
        - suppose the variable name in the layout page is $heading. In the corresponding route page, you can write as

        <x-slot:heading> Variable Dynamic Name </x-slot:heading>

            -> In this way i.e. by using the name of the slot, we specify the slot we are going to target.

    -> Navigation Links are little different and usually more complex from ordinary anchor tags. For example, we show different color for an active nav. So, you must keep nav links in separate file to remove the complexity from general file.

* Lecture 05 : Style Active Nav Link *

    -> We are going to add some custom styling and some code to highlight the active link.

    * *     request()    * *
        -> we used a method 'request()'. This helper method is used to grab information about the "CURRENT REQUEST" .

        -> This helper method has another method 'request()->is('expression')' which takes an expression and tells if the given expression matches the current page.
            -> request()->is('about') will return true if we are on 'about' page.

    * *     Aria Current     * *

       aria-current="page"
       -> This HTML attribute is used by screen readers, and it tells the user who has vision impairment whether the active nav link is current page or not.

    * *     Attributes and Props     * *

        Attributes -> refer to HTML attributes like 'id', 'class', 'href' etc.

        Props (Property) -> is anything that is not an attribute. You must know about them so not to include them as attribute of a tag.
            -> If you have a prop of name 'active' like :
            <a href="#" id="foo" active="uh-oh">
               now you have an anchor tag with an attribute 'active'. And that doesn't make sense. So Props should be distinguishable from HTML attributes.

        -> The attributes are rendered with the html page and can be seen when you inspect the page, however you can not see the props when you inspect a webpage using developer tools.

    * *     Blade Directives     * *

        -> Directives in Blade start with '@'.
        -> Directives can be @dump, @foreach, @if, @Props and
        -> @props directives are usually initialized on top in a file .
        -> They are ultimately compiled down to Vanilla PHP echo statements or function calls.

        -> Props (properties) are usually declared as array. If we don't declare Props, browser will render them as normal HTML attributes. (you can confirm by inspecting the webpage).
        -> props are passed as variables.

            @props(['active' => false])

            <a $active >Home</a>

        -> Must initialize props with some value so if anything fails, that default value is used.

        -> With laravel or blade, sometimes false is treated as "false" i.e. expression false is treated as string false.
        How to solve this?
        Put a semicolon : before a prop to indicate that the given value is an expression and not the string like:

            <x-nav-link href="/" :active="false">Home</x-nav-link>

        -> You can use PHP directive to execute php code as:

            @php
                // some php code
            @endphp

        * *     HOME WORK     * *

            -> creating a new 'type' props and apply if-statement if the type is button or anchor tag. Code for homework

                @props(['active' => false,
                    'type' => 'a'
                ])

                @if($type === 'a')
                    <a {{ $attributes }}  class=" {{ $active ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white' }} rounded-md px-3 py-2 text-base font-medium " aria-current=" {{ $active ? 'page' : 'false' }} ">{{ $slot }}</a>
                @else
                    <button {{ $attributes }}  class=" {{ $active ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white' }} rounded-md px-3 py-2 text-base font-medium " aria-current=" {{ $active ? 'page' : 'false' }} "> {{ $slot }} </button>
                @endif


* Lecture 06: View Data and Route Wildcards *

    -> In routes file, you can pass an array to the 'view()' along with the route. And, then you can access that array of variables in corresponding view file.

    ``` laravel

        ./routes/web.php
        Route::get('/', function () {
            return view('home', [
                'greeting' => 'Yo',
                'name' => 'Larry Nickolas'
            ]);
        });

        ./resources/views/home.blade.php
        <h1> {{ $greeting }} from the Welcome page. My name is {{ $name }} </h1>

    ```

    ->  Let's do something complex, suppose we have to list down job on our home page. So we can pass an array which will contains jobs and each job will have properties like 'Job Title' and 'Salary' etc.

    ``` laravel

    Route::get('/jobs', function () {
        return view('jobs', [
            'jobs' => [
                [
                    'id' => 1,
                    'title' => 'Director',
                    'salary' => '$50,000'
                ],
                [
                    'id' => 2,
                    'title' => 'Programmer',
                    'salary' => '$10,000'
                ],
                [
                    'id' => 3,
                    'title' => 'Teacher',
                    'salary' => '$40,000'
                ]
            ]
        ]);
    });


    ./resources/views/jobs.blade.php
            @foreach( $jobs as $job)
                    <li><strong> {{ $job['title'] }} : </strong> Pays {{ $job['salary'] }}</li>
            @endforeach

    -> Let's change the about page to the job page and shift this job listing to that and make our home page simple and clean.
    -> We need to change about.blade.php to jobs.blade.php, change the nav-link in the layout.blade.php file. tweak the view method in the ./routes/web.php to include the 'jobs[]'.
    -> 'about' page is now converted into 'jobs' page.

    * *     Routing to Specific Job Page    * *

        -> We are now going to create a specific page for each job. For that, we have included 'id' as property so each job is identifiable, and we can route to that specific job page using '/jobs/{id}'

        -> Turn the list items on jobs page into links using anchor tags.

        * * *   How Do We Create a Route that Listens for /jobs/<some_dynamic_value> ?  * * *

            -> Let's create a route in /web.php

            ```

            Route::get('/jobs/{id}', function ($id) {
                dd($id);
                return view('contact');
            });

            ```
            -> Laravel has cool thing. It will automatically detect that if something is enclosed in curly braces, it is some 'wildcard' character, and then you can pass it to any function to use it as you like.

            -> now if you put url example.test/jobs/1
                => dd($id) will give you value 1.
            -> likewise for 2 and 3.

            -> notice {id} was a wildcard, laravel did all the work of grabbing it, isolating it and then passing to the callback function/closure.

        * * *   Create a Route for Each Job Page  * * *

            -> We can do this by passing all the jobs to the callback function in the Route::get() and then return the view where $id will be equal to user requested job id.

            -> instead of running a foreach loop on each array item, leverage Laravel framework and use Arr::method() which is gonna give a number of methods to be run on array items.

            -> use the first() method to find the first item in the array which matches the given criteria

                ```

                $job = \Illuminate\Support\Arr::first($jobs, function($job) use ($id) {
                       return $job['id'] === $id;
                });

                // load the corresponding view
                return view('job', ['job' => $job]);

                ```

                OR

                ```

                $job = \Illuminate\Support\Arr::first($jobs, fn($job) => $job['id'] == $id);

                // load the corresponding view
                return view('job', ['job' => $job]);

                ```
            -> This code says, look in the $jobs array, grab each item as $job and return true if the value of 'id' property of that job equal to given value of the id.

            -> Create a corresponding job.blade.php and leveraging $job variable, print the job details
